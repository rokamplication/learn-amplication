/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OwnFirst } from "./OwnFirst";
import { OwnFirstCountArgs } from "./OwnFirstCountArgs";
import { OwnFirstFindManyArgs } from "./OwnFirstFindManyArgs";
import { OwnFirstFindUniqueArgs } from "./OwnFirstFindUniqueArgs";
import { CreateOwnFirstArgs } from "./CreateOwnFirstArgs";
import { UpdateOwnFirstArgs } from "./UpdateOwnFirstArgs";
import { DeleteOwnFirstArgs } from "./DeleteOwnFirstArgs";
import { OwnFirstService } from "../ownFirst.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OwnFirst)
export class OwnFirstResolverBase {
  constructor(
    protected readonly service: OwnFirstService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OwnFirst",
    action: "read",
    possession: "any",
  })
  async _ownFirstsMeta(
    @graphql.Args() args: OwnFirstCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OwnFirst])
  @nestAccessControl.UseRoles({
    resource: "OwnFirst",
    action: "read",
    possession: "any",
  })
  async ownFirsts(
    @graphql.Args() args: OwnFirstFindManyArgs
  ): Promise<OwnFirst[]> {
    return this.service.ownFirsts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OwnFirst, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OwnFirst",
    action: "read",
    possession: "own",
  })
  async ownFirst(
    @graphql.Args() args: OwnFirstFindUniqueArgs
  ): Promise<OwnFirst | null> {
    const result = await this.service.ownFirst(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OwnFirst)
  @nestAccessControl.UseRoles({
    resource: "OwnFirst",
    action: "create",
    possession: "any",
  })
  async createOwnFirst(
    @graphql.Args() args: CreateOwnFirstArgs
  ): Promise<OwnFirst> {
    return await this.service.createOwnFirst({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OwnFirst)
  @nestAccessControl.UseRoles({
    resource: "OwnFirst",
    action: "update",
    possession: "any",
  })
  async updateOwnFirst(
    @graphql.Args() args: UpdateOwnFirstArgs
  ): Promise<OwnFirst | null> {
    try {
      return await this.service.updateOwnFirst({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OwnFirst)
  @nestAccessControl.UseRoles({
    resource: "OwnFirst",
    action: "delete",
    possession: "any",
  })
  async deleteOwnFirst(
    @graphql.Args() args: DeleteOwnFirstArgs
  ): Promise<OwnFirst | null> {
    try {
      return await this.service.deleteOwnFirst(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
